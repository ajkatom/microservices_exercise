{"id":"../node_modules/apollo-server-types/dist/index.js","dependencies":[{"name":"/Users/alonadelson/Desktop/dev/microsrvs/classifieds-app/node_modules/apollo-server-types/dist/index.js.map","includedInParent":true,"mtime":499162500000},{"name":"/Users/alonadelson/Desktop/dev/microsrvs/classifieds-app/node_modules/apollo-server-types/src/index.ts","includedInParent":true,"mtime":499162500000},{"name":"/Users/alonadelson/Desktop/dev/microsrvs/classifieds-app/package.json","includedInParent":true,"mtime":1580076452853},{"name":"/Users/alonadelson/Desktop/dev/microsrvs/classifieds-app/node_modules/apollo-server-types/package.json","includedInParent":true,"mtime":1579993776772},{"name":"graphql","loc":{"line":3,"column":26},"parent":"/Users/alonadelson/Desktop/dev/microsrvs/classifieds-app/node_modules/apollo-server-types/dist/index.js","resolved":"/Users/alonadelson/Desktop/dev/microsrvs/classifieds-app/node_modules/graphql/index.mjs"}],"generated":{"js":"\"use strict\";\n\nfunction _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function (obj) { return typeof obj; }; } else { _typeof = function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar graphql_1 = require(\"graphql\");\n\nvar InvalidGraphQLRequestError =\n/*#__PURE__*/\nfunction (_graphql_1$GraphQLErr) {\n  _inherits(InvalidGraphQLRequestError, _graphql_1$GraphQLErr);\n\n  function InvalidGraphQLRequestError() {\n    _classCallCheck(this, InvalidGraphQLRequestError);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(InvalidGraphQLRequestError).apply(this, arguments));\n  }\n\n  return InvalidGraphQLRequestError;\n}(graphql_1.GraphQLError);\n\nexports.InvalidGraphQLRequestError = InvalidGraphQLRequestError;"},"sourceMaps":{"js":{"mappings":[{"source":"../src/index.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":21,"column":0}},{"source":"../src/index.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":21,"column":4}},{"source":"../src/index.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":21,"column":13}},{"source":"../src/index.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":21,"column":16}},{"source":"../src/index.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":21,"column":23}},{"source":"../src/index.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":21,"column":24}},{"source":"../src/index.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":21,"column":33}},{"source":"../src/index.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":21,"column":34}},{"source":"../src/index.ts","name":null,"original":{"line":96,"column":13},"generated":{"line":23,"column":4}},{"source":"../src/index.ts","name":null,"original":{"line":96,"column":48},"generated":{"line":35,"column":2}},{"source":"../src/index.ts","name":null,"original":{"line":96,"column":48},"generated":{"line":35,"column":11}},{"source":"../src/index.ts","name":null,"original":{"line":96,"column":48},"generated":{"line":35,"column":12}},{"source":"../src/index.ts","name":null,"original":{"line":96,"column":0},"generated":{"line":37,"column":0}},{"source":"../src/index.ts","name":null,"original":{"line":96,"column":0},"generated":{"line":37,"column":7}},{"source":"../src/index.ts","name":null,"original":{"line":96,"column":0},"generated":{"line":37,"column":8}},{"source":"../src/index.ts","name":null,"original":{"line":96,"column":0},"generated":{"line":37,"column":34}},{"source":"../src/index.ts","name":null,"original":{"line":96,"column":0},"generated":{"line":37,"column":37}},{"source":"../src/index.ts","name":null,"original":{"line":96,"column":0},"generated":{"line":37,"column":63}}],"sources":{"../src/index.ts":"import { Request, Response } from 'apollo-server-env';\nimport {\n  GraphQLSchema,\n  ValidationContext,\n  ASTVisitor,\n  GraphQLFormattedError,\n  OperationDefinitionNode,\n  DocumentNode,\n  GraphQLError,\n} from 'graphql';\n\n// This seems like it could live in this package too.\nimport { KeyValueCache } from 'apollo-server-caching';\nimport { Trace } from 'apollo-engine-reporting-protobuf';\n\nexport type ValueOrPromise<T> = T | Promise<T>;\nexport type WithRequired<T, K extends keyof T> = T & Required<Pick<T, K>>;\n\ntype Mutable<T> = { -readonly [P in keyof T]: T[P] };\n\nexport interface GraphQLServiceContext {\n  schema: GraphQLSchema;\n  schemaHash: string;\n  engine: {\n    serviceID?: string;\n    apiKeyHash?: string;\n  };\n  persistedQueries?: {\n    cache: KeyValueCache;\n  };\n}\n\nexport interface GraphQLRequest {\n  query?: string;\n  operationName?: string;\n  variables?: VariableValues;\n  extensions?: Record<string, any>;\n  http?: Pick<Request, 'url' | 'method' | 'headers'>;\n}\n\nexport type VariableValues = { [name: string]: any };\n\nexport interface GraphQLResponse {\n  data?: Record<string, any> | null;\n  errors?: ReadonlyArray<GraphQLFormattedError>;\n  extensions?: Record<string, any>;\n  http?: Pick<Response, 'headers'> & Partial<Pick<Mutable<Response>, 'status'>>;\n}\n\nexport interface GraphQLRequestMetrics {\n  captureTraces?: boolean;\n  persistedQueryHit?: boolean;\n  persistedQueryRegister?: boolean;\n  responseCacheHit?: boolean;\n  forbiddenOperation?: boolean;\n  registeredOperation?: boolean;\n  startHrTime?: [number, number];\n  queryPlanTrace?: Trace.QueryPlanNode;\n}\n\nexport interface GraphQLRequestContext<TContext = Record<string, any>> {\n  readonly request: GraphQLRequest;\n  readonly response?: GraphQLResponse;\n\n  readonly context: TContext;\n  readonly cache: KeyValueCache;\n\n  // This will be replaced with the `operationID`.\n  readonly queryHash?: string;\n\n  readonly document?: DocumentNode;\n  readonly source?: string;\n\n  // `operationName` is set based on the operation AST, so it is defined even if\n  // no `request.operationName` was passed in.  It will be set to `null` for an\n  // anonymous operation, or if `requestName.operationName` was passed in but\n  // doesn't resolve to an operation in the document.\n  readonly operationName?: string | null;\n  readonly operation?: OperationDefinitionNode;\n\n  /**\n   * Unformatted errors which have occurred during the request. Note that these\n   * are present earlier in the request pipeline and differ from **formatted**\n   * errors which are the result of running the user-configurable `formatError`\n   * transformation function over specific errors.\n   */\n  readonly errors?: ReadonlyArray<GraphQLError>;\n\n  readonly metrics?: GraphQLRequestMetrics;\n\n  debug?: boolean;\n}\n\nexport type ValidationRule = (context: ValidationContext) => ASTVisitor;\n\nexport class InvalidGraphQLRequestError extends GraphQLError {}\n\nexport type GraphQLExecutor<TContext = Record<string, any>> = (\n  requestContext: WithRequired<\n    GraphQLRequestContext<TContext>,\n    'document' | 'operationName' | 'operation' | 'queryHash'\n  >,\n) => ValueOrPromise<GraphQLExecutionResult>;\n\nexport type GraphQLExecutionResult = {\n  data?: Record<string, any> | null;\n  errors?: ReadonlyArray<GraphQLError>;\n  extensions?: Record<string, any>;\n};\n"},"lineCount":null}},"error":null,"hash":"5e5f42804efaef02285c67485dfc8a59","cacheData":{"env":{}}}